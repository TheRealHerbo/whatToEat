// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package access

import (
	"context"
	"database/sql"
)

const countRecipies = `-- name: CountRecipies :one
SELECT COUNT(*) FROM recipie
`

func (q *Queries) CountRecipies(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRecipies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRecipie = `-- name: CreateRecipie :one
INSERT INTO recipie (
  name, ingredients, directions
) VALUES (
  ?, ?, ?
)
RETURNING id, name, ingredients, directions
`

type CreateRecipieParams struct {
	Name        string
	Ingredients sql.NullString
	Directions  sql.NullString
}

func (q *Queries) CreateRecipie(ctx context.Context, arg CreateRecipieParams) (Recipie, error) {
	row := q.db.QueryRowContext(ctx, createRecipie, arg.Name, arg.Ingredients, arg.Directions)
	var i Recipie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ingredients,
		&i.Directions,
	)
	return i, err
}

const deleteRecipie = `-- name: DeleteRecipie :exec
DELETE FROM recipie
WHERE id = ?
`

func (q *Queries) DeleteRecipie(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipie, id)
	return err
}

const getRecipie = `-- name: GetRecipie :one
SELECT id, name, ingredients, directions FROM recipie
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRecipie(ctx context.Context, id int64) (Recipie, error) {
	row := q.db.QueryRowContext(ctx, getRecipie, id)
	var i Recipie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ingredients,
		&i.Directions,
	)
	return i, err
}

const listRecipies = `-- name: ListRecipies :many
SELECT id, name, ingredients, directions FROM recipie
ORDER BY name
`

func (q *Queries) ListRecipies(ctx context.Context) ([]Recipie, error) {
	rows, err := q.db.QueryContext(ctx, listRecipies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipie
	for rows.Next() {
		var i Recipie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ingredients,
			&i.Directions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipie = `-- name: UpdateRecipie :exec
UPDATE recipie
set name = ?,
ingredients = ?,
directions = ?
WHERE id = ?
`

type UpdateRecipieParams struct {
	Name        string
	Ingredients sql.NullString
	Directions  sql.NullString
	ID          int64
}

func (q *Queries) UpdateRecipie(ctx context.Context, arg UpdateRecipieParams) error {
	_, err := q.db.ExecContext(ctx, updateRecipie,
		arg.Name,
		arg.Ingredients,
		arg.Directions,
		arg.ID,
	)
	return err
}
